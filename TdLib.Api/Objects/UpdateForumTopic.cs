using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        public partial class Update : Object
        {
            /// <summary>
            /// Information about a topic in a forum chat was changed
            /// </summary>
            public class UpdateForumTopic : Update
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "updateForumTopic";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// Chat identifier
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("chat_id")]
                public long ChatId { get; set; }

                /// <summary>
                /// Message thread identifier of the topic
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("message_thread_id")]
                public long MessageThreadId { get; set; }

                /// <summary>
                /// True, if the topic is pinned in the topic list
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("is_pinned")]
                public bool IsPinned { get; set; }

                /// <summary>
                /// Identifier of the last read incoming message
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("last_read_inbox_message_id")]
                public long LastReadInboxMessageId { get; set; }

                /// <summary>
                /// Identifier of the last read outgoing message
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("last_read_outbox_message_id")]
                public long LastReadOutboxMessageId { get; set; }

                /// <summary>
                /// Notification settings for the topic
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("notification_settings")]
                public ChatNotificationSettings NotificationSettings { get; set; }
            }
        }
    }
}
// REUSE-IgnoreEnd