using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        public partial class MessageContent : Object
        {
            /// <summary>
            /// A message with information about a group call not bound to a chat. If the message is incoming, the call isn't active, isn't missed, and has no duration,
            /// and getOption("can_accept_calls") is true, then incoming call screen must be shown to the user. Use joinGroupCall to accept the call or declineGroupCallInvitation to decline it.
            /// If the call become active or missed, then the call screen must be hidden
            /// </summary>
            public class MessageGroupCall : MessageContent
            {
                /// <summary>
                /// Data type for serialization
                /// </summary>
                [JsonProperty("@type")]
                public override string DataType { get; set; } = "messageGroupCall";

                /// <summary>
                /// Extra data attached to the message
                /// </summary>
                [JsonProperty("@extra")]
                public override string Extra { get; set; }

                /// <summary>
                /// True, if the call is active, i.e. the called user joined the call
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("is_active")]
                public bool IsActive { get; set; }

                /// <summary>
                /// True, if the called user missed or declined the call
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("was_missed")]
                public bool WasMissed { get; set; }

                /// <summary>
                /// True, if the call is a video call
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("is_video")]
                public bool IsVideo { get; set; }

                /// <summary>
                /// Call duration, in seconds; for left calls only
                /// </summary>
                [JsonConverter(typeof(Converter))]
                [JsonProperty("duration")]
                public int Duration { get; set; }

                /// <summary>
                /// Identifiers of some other call participants
                /// </summary>
                [JsonProperty("other_participant_ids", ItemConverterType = typeof(Converter))]
                public MessageSender[] OtherParticipantIds { get; set; }
            }
        }
    }
}
// REUSE-IgnoreEnd