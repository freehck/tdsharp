using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Describes a connection of the bot with a business account
        /// </summary>
        public partial class BusinessConnection : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "businessConnection";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Unique identifier of the connection
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("id")]
            public string Id { get; set; }

            /// <summary>
            /// Identifier of the business user that created the connection
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("user_id")]
            public long UserId { get; set; }

            /// <summary>
            /// Chat identifier of the private chat with the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("user_chat_id")]
            public long UserChatId { get; set; }

            /// <summary>
            /// Point in time (Unix timestamp) when the connection was established
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("date")]
            public int Date { get; set; }

            /// <summary>
            /// True, if the bot can send messages to the connected user; false otherwise
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_reply")]
            public bool CanReply { get; set; }

            /// <summary>
            /// True, if the connection is enabled; false otherwise
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_enabled")]
            public bool IsEnabled { get; set; }
        }
    }
}
// REUSE-IgnoreEnd