using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Represents a story
        /// </summary>
        public partial class Story : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "story";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Unique story identifier among stories of the given sender
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("id")]
            public int Id { get; set; }

            /// <summary>
            /// Identifier of the chat that posted the story
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("sender_chat_id")]
            public long SenderChatId { get; set; }

            /// <summary>
            /// Identifier of the sender of the story; may be null if the story is posted on behalf of the sender_chat_id
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("sender_id")]
            public MessageSender SenderId { get; set; }

            /// <summary>
            /// Point in time (Unix timestamp) when the story was published
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("date")]
            public int Date { get; set; }

            /// <summary>
            /// True, if the story is being sent by the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_being_sent")]
            public bool IsBeingSent { get; set; }

            /// <summary>
            /// True, if the story is being edited by the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_being_edited")]
            public bool IsBeingEdited { get; set; }

            /// <summary>
            /// True, if the story was edited
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_edited")]
            public bool IsEdited { get; set; }

            /// <summary>
            /// True, if the story is saved in the sender's profile and will be available there after expiration
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_posted_to_chat_page")]
            public bool IsPostedToChatPage { get; set; }

            /// <summary>
            /// True, if the story is visible only for the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_visible_only_for_self")]
            public bool IsVisibleOnlyForSelf { get; set; }

            /// <summary>
            /// True, if the story can be deleted
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_be_deleted")]
            public bool CanBeDeleted { get; set; }

            /// <summary>
            /// True, if the story can be edited
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_be_edited")]
            public bool CanBeEdited { get; set; }

            /// <summary>
            /// True, if the story can be forwarded as a message. Otherwise, screenshots and saving of the story content must be also forbidden
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_be_forwarded")]
            public bool CanBeForwarded { get; set; }

            /// <summary>
            /// True, if the story can be replied in the chat with the story sender
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_be_replied")]
            public bool CanBeReplied { get; set; }

            /// <summary>
            /// True, if the story's is_posted_to_chat_page value can be changed
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_toggle_is_posted_to_chat_page")]
            public bool CanToggleIsPostedToChatPage { get; set; }

            /// <summary>
            /// True, if the story statistics are available through getStoryStatistics
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_get_statistics")]
            public bool CanGetStatistics { get; set; }

            /// <summary>
            /// True, if interactions with the story can be received through getStoryInteractions
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("can_get_interactions")]
            public bool CanGetInteractions { get; set; }

            /// <summary>
            /// True, if users viewed the story can't be received, because the story has expired more than getOption("story_viewers_expiration_delay") seconds ago
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("has_expired_viewers")]
            public bool HasExpiredViewers { get; set; }

            /// <summary>
            /// Information about the original story; may be null if the story wasn't reposted
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("repost_info")]
            public StoryRepostInfo RepostInfo { get; set; }

            /// <summary>
            /// Information about interactions with the story; may be null if the story isn't owned or there were no interactions
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("interaction_info")]
            public StoryInteractionInfo InteractionInfo { get; set; }

            /// <summary>
            /// Type of the chosen reaction; may be null if none
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chosen_reaction_type")]
            public ReactionType ChosenReactionType { get; set; }

            /// <summary>
            /// Privacy rules affecting story visibility; may be approximate for non-owned stories
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("privacy_settings")]
            public StoryPrivacySettings PrivacySettings { get; set; }

            /// <summary>
            /// Content of the story
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("content")]
            public StoryContent Content { get; set; }

            /// <summary>
            /// Clickable areas to be shown on the story content
            /// </summary>
            [JsonProperty("areas", ItemConverterType = typeof(Converter))]
            public StoryArea[] Areas { get; set; }

            /// <summary>
            /// Caption of the story
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("caption")]
            public FormattedText Caption { get; set; }
        }
    }
}
// REUSE-IgnoreEnd