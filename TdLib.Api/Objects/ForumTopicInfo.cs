using System;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Contains basic information about a forum topic
        /// </summary>
        public partial class ForumTopicInfo : Object
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "forumTopicInfo";

            /// <summary>
            /// Extra data attached to the object
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Message thread identifier of the topic
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("message_thread_id")]
            public long MessageThreadId { get; set; }

            /// <summary>
            /// Name of the topic
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("name")]
            public string Name { get; set; }

            /// <summary>
            /// Icon of the topic
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("icon")]
            public ForumTopicIcon Icon { get; set; }

            /// <summary>
            /// Point in time (Unix timestamp) when the topic was created
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("creation_date")]
            public int CreationDate { get; set; }

            /// <summary>
            /// Identifier of the creator of the topic
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("creator_id")]
            public MessageSender CreatorId { get; set; }

            /// <summary>
            /// True, if the topic is the General topic list
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_general")]
            public bool IsGeneral { get; set; }

            /// <summary>
            /// True, if the topic was created by the current user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_outgoing")]
            public bool IsOutgoing { get; set; }

            /// <summary>
            /// True, if the topic is closed
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_closed")]
            public bool IsClosed { get; set; }

            /// <summary>
            /// True, if the topic is hidden above the topic list and closed; for General topic only
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_hidden")]
            public bool IsHidden { get; set; }
        }
    }
}
// REUSE-IgnoreEnd