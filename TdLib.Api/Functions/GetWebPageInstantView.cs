using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns an instant view version of a web page if available. This is an offline method if only_local is true. Returns a 404 error if the web page has no instant view page
        /// </summary>
        public class GetWebPageInstantView : Function<WebPageInstantView>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getWebPageInstantView";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The web page URL
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("url")]
            public string Url { get; set; }

            /// <summary>
            /// Pass true to get only locally available information without sending network requests
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("only_local")]
            public bool OnlyLocal { get; set; }
        }

        /// <summary>
        /// Returns an instant view version of a web page if available. This is an offline method if only_local is true. Returns a 404 error if the web page has no instant view page
        /// </summary>
        public static Task<WebPageInstantView> GetWebPageInstantViewAsync(
            this Client client, string url = default, bool onlyLocal = default)
        {
            return client.ExecuteAsync(new GetWebPageInstantView
            {
                Url = url, OnlyLocal = onlyLocal
            });
        }
    }
}
// REUSE-IgnoreEnd