using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns information about a file by its remote identifier; this is an offline request. Can be used to register a URL as a file for further uploading, or sending as a message. Even the request succeeds, the file can be used only if it is still accessible to the user.
        /// For example, if the file is from a message, then the message must be not deleted and accessible to the user. If the file database is disabled, then the corresponding object with the file must be preloaded by the application
        /// </summary>
        public class GetRemoteFile : Function<File>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "getRemoteFile";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Remote identifier of the file to get
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("remote_file_id")]
            public string RemoteFileId { get; set; }

            /// <summary>
            /// File type; pass null if unknown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("file_type")]
            public FileType FileType { get; set; }
        }

        /// <summary>
        /// Returns information about a file by its remote identifier; this is an offline request. Can be used to register a URL as a file for further uploading, or sending as a message. Even the request succeeds, the file can be used only if it is still accessible to the user.
        /// For example, if the file is from a message, then the message must be not deleted and accessible to the user. If the file database is disabled, then the corresponding object with the file must be preloaded by the application
        /// </summary>
        public static Task<File> GetRemoteFileAsync(
            this Client client, string remoteFileId = default, FileType fileType = default)
        {
            return client.ExecuteAsync(new GetRemoteFile
            {
                RemoteFileId = remoteFileId, FileType = fileType
            });
        }
    }
}
// REUSE-IgnoreEnd