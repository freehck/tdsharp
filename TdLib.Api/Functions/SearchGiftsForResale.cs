using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Returns upgraded gifts that can be bought from other owners
        /// </summary>
        public class SearchGiftsForResale : Function<GiftsForResale>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "searchGiftsForResale";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the regular gift that was upgraded to a unique gift
            /// </summary>
            [JsonConverter(typeof(Converter.Int64))]
            [JsonProperty("gift_id")]
            public long GiftId { get; set; }

            /// <summary>
            /// Order in which the results will be sorted
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("order")]
            public GiftForResaleOrder Order { get; set; }

            /// <summary>
            /// Attributes used to filter received gifts. If multiple attributes of the same type are specified, then all of them are allowed.
            /// </summary>
            [JsonProperty("attributes", ItemConverterType = typeof(Converter))]
            public UpgradedGiftAttributeId[] Attributes { get; set; }

            /// <summary>
            /// Offset of the first entry to return as received from the previous request with the same order and attributes; use empty string to get the first chunk of results
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("offset")]
            public string Offset { get; set; }

            /// <summary>
            /// The maximum number of gifts to return
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("limit")]
            public int Limit { get; set; }
        }

        /// <summary>
        /// Returns upgraded gifts that can be bought from other owners
        /// </summary>
        public static Task<GiftsForResale> SearchGiftsForResaleAsync(
            this Client client, long giftId = default, GiftForResaleOrder order = default, UpgradedGiftAttributeId[] attributes = default, string offset = default, int limit = default)
        {
            return client.ExecuteAsync(new SearchGiftsForResale
            {
                GiftId = giftId, Order = order, Attributes = attributes, Offset = offset, Limit = limit
            });
        }
    }
}
// REUSE-IgnoreEnd