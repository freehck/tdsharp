using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Joins a group call that is not bound to a chat
        /// </summary>
        public class JoinGroupCall : Function<GroupCallInfo>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "joinGroupCall";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The group call to join
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("input_group_call")]
            public InputGroupCall InputGroupCall { get; set; }

            /// <summary>
            /// Parameters to join the call
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("join_parameters")]
            public GroupCallJoinParameters JoinParameters { get; set; }
        }

        /// <summary>
        /// Joins a group call that is not bound to a chat
        /// </summary>
        public static Task<GroupCallInfo> JoinGroupCallAsync(
            this Client client, InputGroupCall inputGroupCall = default, GroupCallJoinParameters joinParameters = default)
        {
            return client.ExecuteAsync(new JoinGroupCall
            {
                InputGroupCall = inputGroupCall, JoinParameters = joinParameters
            });
        }
    }
}
// REUSE-IgnoreEnd