using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Bans users from a group call not bound to a chat; requires groupCall.is_owned. Only the owner of the group call can invite the banned users back
        /// </summary>
        public class BanGroupCallParticipants : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "banGroupCallParticipants";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Group call identifier
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("group_call_id")]
            public int GroupCallId { get; set; }

            /// <summary>
            /// Identifiers of group call participants to ban; identifiers of unknown users from the update updateGroupCallParticipants can be also passed to the method
            /// </summary>
            [JsonProperty("user_ids", ItemConverterType = typeof(Converter))]
            public long[] UserIds { get; set; }
        }

        /// <summary>
        /// Bans users from a group call not bound to a chat; requires groupCall.is_owned. Only the owner of the group call can invite the banned users back
        /// </summary>
        public static Task<Ok> BanGroupCallParticipantsAsync(
            this Client client, int groupCallId = default, long[] userIds = default)
        {
            return client.ExecuteAsync(new BanGroupCallParticipants
            {
                GroupCallId = groupCallId, UserIds = userIds
            });
        }
    }
}
// REUSE-IgnoreEnd