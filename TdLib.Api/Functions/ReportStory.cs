using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Reports a story to the Telegram moderators
        /// </summary>
        public class ReportStory : Function<ReportStoryResult>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "reportStory";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// The identifier of the poster of the story to report
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("story_poster_chat_id")]
            public long StoryPosterChatId { get; set; }

            /// <summary>
            /// The identifier of the story to report
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("story_id")]
            public int StoryId { get; set; }

            /// <summary>
            /// Option identifier chosen by the user; leave empty for the initial request
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("option_id")]
            public byte[] OptionId { get; set; }

            /// <summary>
            /// Additional report details; 0-1024 characters; leave empty for the initial request
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("text")]
            public string Text { get; set; }
        }

        /// <summary>
        /// Reports a story to the Telegram moderators
        /// </summary>
        public static Task<ReportStoryResult> ReportStoryAsync(
            this Client client, long storyPosterChatId = default, int storyId = default, byte[] optionId = default, string text = default)
        {
            return client.ExecuteAsync(new ReportStory
            {
                StoryPosterChatId = storyPosterChatId, StoryId = storyId, OptionId = optionId, Text = text
            });
        }
    }
}
// REUSE-IgnoreEnd