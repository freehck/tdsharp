using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Changes the amount of Telegram Stars that must be paid to send a message to a supergroup chat; requires can_restrict_members administrator right and supergroupFullInfo.can_enable_paid_messages
        /// </summary>
        public class SetChatPaidMessageStarCount : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "setChatPaidMessageStarCount";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the supergroup chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// The new number of Telegram Stars that must be paid for each message that is sent to the supergroup chat unless the sender is an administrator of the chat; 0-getOption("paid_message_star_count_max").
            /// The supergroup will receive getOption("paid_message_earnings_per_mille") Telegram Stars for each 1000 Telegram Stars paid for message sending
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("paid_message_star_count")]
            public long PaidMessageStarCount { get; set; }
        }

        /// <summary>
        /// Changes the amount of Telegram Stars that must be paid to send a message to a supergroup chat; requires can_restrict_members administrator right and supergroupFullInfo.can_enable_paid_messages
        /// </summary>
        public static Task<Ok> SetChatPaidMessageStarCountAsync(
            this Client client, long chatId = default, long paidMessageStarCount = default)
        {
            return client.ExecuteAsync(new SetChatPaidMessageStarCount
            {
                ChatId = chatId, PaidMessageStarCount = paidMessageStarCount
            });
        }
    }
}
// REUSE-IgnoreEnd