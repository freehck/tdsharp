using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Decrypts group call data received by tgcalls
        /// </summary>
        public class DecryptGroupCallData : Function<Data>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "decryptGroupCallData";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Group call identifier. The call must not be a video chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("group_call_id")]
            public int GroupCallId { get; set; }

            /// <summary>
            /// Identifier of the group call participant, which sent the data
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("participant_id")]
            public MessageSender ParticipantId { get; set; }

            /// <summary>
            /// Data channel for which data was encrypted; pass null if unknown
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("data_channel")]
            public GroupCallDataChannel DataChannel { get; set; }

            /// <summary>
            /// Data to decrypt
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("data")]
            public byte[] Data { get; set; }
        }

        /// <summary>
        /// Decrypts group call data received by tgcalls
        /// </summary>
        public static Task<Data> DecryptGroupCallDataAsync(
            this Client client, int groupCallId = default, MessageSender participantId = default, GroupCallDataChannel dataChannel = default, byte[] data = default)
        {
            return client.ExecuteAsync(new DecryptGroupCallData
            {
                GroupCallId = groupCallId, ParticipantId = participantId, DataChannel = dataChannel, Data = data
            });
        }
    }
}
// REUSE-IgnoreEnd