using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Requests QR code authentication by scanning a QR code on another logged in device. Works only when the current authorization state is authorizationStateWaitPhoneNumber,
        /// or if there is no pending authentication query and the current authorization state is authorizationStateWaitEmailAddress, authorizationStateWaitEmailCode, authorizationStateWaitCode, authorizationStateWaitRegistration, or authorizationStateWaitPassword
        /// </summary>
        public class RequestQrCodeAuthentication : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "requestQrCodeAuthentication";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// List of user identifiers of other users currently using the application
            /// </summary>
            [JsonProperty("other_user_ids", ItemConverterType = typeof(Converter))]
            public long[] OtherUserIds { get; set; }
        }

        /// <summary>
        /// Requests QR code authentication by scanning a QR code on another logged in device. Works only when the current authorization state is authorizationStateWaitPhoneNumber,
        /// or if there is no pending authentication query and the current authorization state is authorizationStateWaitEmailAddress, authorizationStateWaitEmailCode, authorizationStateWaitCode, authorizationStateWaitRegistration, or authorizationStateWaitPassword
        /// </summary>
        public static Task<Ok> RequestQrCodeAuthenticationAsync(
            this Client client, long[] otherUserIds = default)
        {
            return client.ExecuteAsync(new RequestQrCodeAuthentication
            {
                OtherUserIds = otherUserIds
            });
        }
    }
}
// REUSE-IgnoreEnd