using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Allows the specified user to send unpaid private messages to the current user by adding a rule to userPrivacySettingAllowUnpaidMessages
        /// </summary>
        public class AllowUnpaidMessagesFromUser : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "allowUnpaidMessagesFromUser";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("user_id")]
            public long UserId { get; set; }

            /// <summary>
            /// Pass true to refund the user previously paid messages
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("refund_payments")]
            public bool RefundPayments { get; set; }
        }

        /// <summary>
        /// Allows the specified user to send unpaid private messages to the current user by adding a rule to userPrivacySettingAllowUnpaidMessages
        /// </summary>
        public static Task<Ok> AllowUnpaidMessagesFromUserAsync(
            this Client client, long userId = default, bool refundPayments = default)
        {
            return client.ExecuteAsync(new AllowUnpaidMessagesFromUser
            {
                UserId = userId, RefundPayments = refundPayments
            });
        }
    }
}
// REUSE-IgnoreEnd