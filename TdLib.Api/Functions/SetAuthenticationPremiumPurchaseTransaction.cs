using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Informs server about an in-store purchase of Telegram Premium before authorization. Works only when the current authorization state is authorizationStateWaitPremiumPurchase
        /// </summary>
        public class SetAuthenticationPremiumPurchaseTransaction : Function<Ok>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "setAuthenticationPremiumPurchaseTransaction";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Information about the transaction
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("transaction")]
            public StoreTransaction Transaction { get; set; }

            /// <summary>
            /// Pass true if this is a restore of a Telegram Premium purchase; only for App Store
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("is_restore")]
            public bool IsRestore { get; set; }

            /// <summary>
            /// ISO 4217 currency code of the payment currency
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("currency")]
            public string Currency { get; set; }

            /// <summary>
            /// Paid amount, in the smallest units of the currency
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("amount")]
            public long Amount { get; set; }
        }

        /// <summary>
        /// Informs server about an in-store purchase of Telegram Premium before authorization. Works only when the current authorization state is authorizationStateWaitPremiumPurchase
        /// </summary>
        public static Task<Ok> SetAuthenticationPremiumPurchaseTransactionAsync(
            this Client client, StoreTransaction transaction = default, bool isRestore = default, string currency = default, long amount = default)
        {
            return client.ExecuteAsync(new SetAuthenticationPremiumPurchaseTransaction
            {
                Transaction = transaction, IsRestore = isRestore, Currency = currency, Amount = amount
            });
        }
    }
}
// REUSE-IgnoreEnd