using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Encrypts group call data before sending them over network using tgcalls
        /// </summary>
        public class EncryptGroupCallData : Function<Data>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "encryptGroupCallData";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Group call identifier. The call must not be a video chat
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("group_call_id")]
            public int GroupCallId { get; set; }

            /// <summary>
            /// Data channel for which data is encrypted
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("data_channel")]
            public GroupCallDataChannel DataChannel { get; set; }

            /// <summary>
            /// Data to encrypt
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("data")]
            public byte[] Data { get; set; }

            /// <summary>
            /// Size of data prefix that must be kept unencrypted
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("unencrypted_prefix_size")]
            public int UnencryptedPrefixSize { get; set; }
        }

        /// <summary>
        /// Encrypts group call data before sending them over network using tgcalls
        /// </summary>
        public static Task<Data> EncryptGroupCallDataAsync(
            this Client client, int groupCallId = default, GroupCallDataChannel dataChannel = default, byte[] data = default, int unencryptedPrefixSize = default)
        {
            return client.ExecuteAsync(new EncryptGroupCallData
            {
                GroupCallId = groupCallId, DataChannel = dataChannel, Data = data, UnencryptedPrefixSize = unencryptedPrefixSize
            });
        }
    }
}
// REUSE-IgnoreEnd