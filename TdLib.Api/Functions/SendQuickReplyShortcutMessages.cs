using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

// REUSE-IgnoreStart
namespace TdLib
{
    /// <summary>
    /// Autogenerated TDLib APIs
    /// </summary>
    public static partial class TdApi
    {
        /// <summary>
        /// Sends messages from a quick reply shortcut. Requires Telegram Business subscription
        /// </summary>
        public class SendQuickReplyShortcutMessages : Function<Messages>
        {
            /// <summary>
            /// Data type for serialization
            /// </summary>
            [JsonProperty("@type")]
            public override string DataType { get; set; } = "sendQuickReplyShortcutMessages";

            /// <summary>
            /// Extra data attached to the function
            /// </summary>
            [JsonProperty("@extra")]
            public override string Extra { get; set; }

            /// <summary>
            /// Identifier of the chat to which to send messages. The chat must be a private chat with a regular user
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("chat_id")]
            public long ChatId { get; set; }

            /// <summary>
            /// Unique identifier of the quick reply shortcut
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("shortcut_id")]
            public int ShortcutId { get; set; }

            /// <summary>
            /// Non-persistent identifier, which will be returned back in messageSendingStatePending object and can be used to match sent messages and corresponding updateNewMessage updates
            /// </summary>
            [JsonConverter(typeof(Converter))]
            [JsonProperty("sending_id")]
            public int SendingId { get; set; }
        }

        /// <summary>
        /// Sends messages from a quick reply shortcut. Requires Telegram Business subscription
        /// </summary>
        public static Task<Messages> SendQuickReplyShortcutMessagesAsync(
            this Client client, long chatId = default, int shortcutId = default, int sendingId = default)
        {
            return client.ExecuteAsync(new SendQuickReplyShortcutMessages
            {
                ChatId = chatId, ShortcutId = shortcutId, SendingId = sendingId
            });
        }
    }
}
// REUSE-IgnoreEnd